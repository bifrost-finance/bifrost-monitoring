version: '3'

services:
  redis:
    image: redis:6-alpine
    command: redis-server --appendonly yes

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.1
    ports:
      - "9200:9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    environment:
      - xpack.security.enabled=false
      - http.host=0.0.0.0
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"

  postgres:
    image: postgres:12-alpine
    command: postgres -c wal_level=logical -c max_replication_slots=1
    ports:
      - 5432:5432
    volumes:
      - .data/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgres

  subquery-node:
    image: onfinality/subql-node:latest
    depends_on:
      - "postgres"
    environment:
      DB_USER: postgres
      DB_PASS: postgres
      DB_DATABASE: postgres
      DB_HOST: postgres
      DB_PORT: 5432
    volumes:
      - ./:/app
    command:
      - -f=/app
      - --local

  graphql-engine:
    image: onfinality/subql-query:latest
    ports:
      - 13000:3000
    depends_on:
      - "postgres"
    environment:
      DB_USER: postgres
      DB_PASS: postgres
      DB_DATABASE: postgres
      DB_HOST: postgres
      DB_PORT: 5432
    command:
      - --name=app
      - --playground


  graphql-engine-hasura:
    image: hasura/graphql-engine:v1.3.3
    ports:
      - "18080:8080"
    depends_on:
      - "postgres"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey

  pgsync:
    image: govpf/pgsync:2.1.0
    volumes:
      - ./pgsync/schema:/schema
    command: >
      sh -c "bootstrap --config /schema/salp.json &&
            pgsync --config /schema/salp.json --daemon"
    sysctls:
      - net.ipv4.tcp_keepalive_time=200
      - net.ipv4.tcp_keepalive_intvl=200
      - net.ipv4.tcp_keepalive_probes=5
    labels:
      org.label-schema.name: "pgsync"
      org.label-schema.description: "Postgres to elasticsearch sync"
      com.label-schema.service-type: "daemon"
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - subquery-node
    environment:
      - PG_USER=postgres
      - PG_HOST=postgres
      - PG_PASSWORD=postgres
      - LOG_LEVEL=INFO
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_SCHEME=http
      - ELASTICSEARCH_HOST=elasticsearch
      - REDIS_HOST=redis

  grafana:
    image: grafana/grafana:8.2.0
    ports:
      - 23000:3000
    depends_on:
      - postgres
    links:
      - postgres
    user: 'root'
    env_file:
      - ./grafana/config.monitoring
    volumes:
      - .data/grafana:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/

  postgraphile:
    image: graphile/postgraphile:v4.12.3
    env_file:
      - ./postgraphile/.env
    depends_on:
      - postgres
    links:
      - postgres
    ports:
      - 5000:5000
    command:
      [
          "--connection",
          "postgres://postgres:postgres@postgres:5432/postgres",
          "--port",
          "5000",
          "--schema",
          "public",
          "--watch"
      ]

  prometheus:
    image: prom/prometheus:v2.30.2
    user: 'root'
    volumes:
      - ./prometheus:/etc/prometheus/
      - .data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor

  node-exporter:
    image: prom/node-exporter:v1.2.2
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    ports:
      - 9100:9100

  alertmanager:
    image: prom/alertmanager:v0.22.2
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  cadvisor:
    image: mirrorgooglecontainers/cadvisor:v0.33.0
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
