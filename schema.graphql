type starterEntity @entity {

  id: ID! #id is a required field

  field1: Int!

  field2: String #filed2 is an optional field

  field3: BigInt

  field4: Date


}

type assetsToken @entity {
  id: ID!
  symbol: String
  precision: Int
  total_supply: BigInt
  token_type: String
  # pair: String[]
}

type TransactionDayData @entity{
  id: ID! # tokenSymbol + '@' + dailyTimestamp
  tokenSymbol: String
  time: Date
  transferCount: BigInt # 每日transfer总次数
  transferAmount: BigInt # 每日交易总金额，每日该tokenSymbol所有transfer的balance相加
  issueCount: BigInt
  issueAmount: BigInt
  burnCount: BigInt
  burnAmount: BigInt
  # token: [assetsToken] @deriveFrom(field: "id") 嵌套暂未实现 https://github.com/OnFinality-io/subql/issues/185
}

type Transaction @entity{
  id: ID! # blockHeight + '-' + eventId
  blockHeight: BigInt
  eventId: Int
  extrinsicId: Int # Extrinsic Id 即 txId
  tokenSymbol: String
  time: Date
  from: String
  to: String
  amount: BigInt
  type: String
}

# type assetsTransferredPrice @entity{
#   id: ID! # tokenSymbol + '@' + dailyTimestamp
#   price: BigInt # 每日最新价格，每出一个块都会更新，最终停止更新于当日最后一个块出块时的price
# }

# type dailyMintPrice @entity {
#   id: ID! # assetId + '@' + dailyTimestamp
#   mintPrice: BigInt
#   vtokenPool: BigInt
#   tokenPool: BigInt
# }

type mktPriceDayData @entity{
  id: ID!
  blockHeight: BigInt
  currencyId: String
  time: Date
  price: String
}

type mintPriceDayData @entity{
  id: ID!
  blockHeight: BigInt
  currencyId: String
  pool: BigInt
  time: Date
  price: String
}