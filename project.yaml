specVersion: 0.0.1
description: ''
repository: 'git@github.com:bifrost-finance/bifrost-subql.git'
schema: ./schema.graphql
network:
  endpoint: 'wss://asgard-rpc.liebi.com/ws'
  types: {
        "CallOf": "Call",
        "DispatchTime": {
            "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
            }
        },
        "ScheduleTaskIndex": "u32",
        "DelayedOrigin": {
            "delay": "BlockNumber",
            "origin": "PalletsOrigin"
        },
        "AuthorityOrigin": "DelayedOrigin",
        "StorageValue": "Vec<u8>",
        "GraduallyUpdate": {
            "key": "StorageKey",
            "targetValue": "StorageValue",
            "perBlock": "StorageValue"
        },
        "StorageKeyBytes": "Vec<u8>",
        "StorageValueBytes": "Vec<u8>",
        "RpcDataProviderId": "Text",
        "DataProviderId": "u8",
        "TimestampedValue": {
            "value": "OracleValue",
            "timestamp": "Moment"
        },
        "TimestampedValueOf": "TimestampedValue",
        "OrderedSet": "Vec<AccountId>",
        "OrmlAccountData": {
            "free": "Balance",
            "reserved": "Balance",
            "frozen": "Balance"
        },
        "OrmlBalanceLock": {
            "amount": "Balance",
            "id": "LockIdentifier"
        },
        "AuctionInfo": {
            "bid": "Option<(AccountId, Balance)>",
            "start": "BlockNumber",
            "end": "Option<BlockNumber>"
        },
        "DelayedDispatchTime": {
            "_enum": {
                "At": "BlockNumber",
                "After": "BlockNumber"
            }
        },
        "DispatchId": "u32",
        "Price": "FixedU128",
        "OrmlVestingSchedule": {
            "start": "BlockNumber",
            "period": "BlockNumber",
            "periodCount": "u32",
            "perPeriod": "Compact<Balance>"
        },
        "VestingScheduleOf": "OrmlVestingSchedule",
        "PoolInfo": {
            "totalShares": "Compact<Share>",
            "totalRewards": "Compact<Balance>",
            "totalWithdrawnRewards": "Compact<Balance>"
        },
        "Share": "u128",
        "OracleValue": "Price",
        "BiddingOrderId": "u64",
        "EraId": "u32",
        "BiddingOrderUnit": {
            "bidder_id": "AccountId",
            "token_id": "AssetId",
            "block_num": "BlockNumber",
            "votes": "Balance",
            "annual_roi": "Permill",
            "validator": "AccountId"
        },
        "BiddingOrderUnitOf": "BiddingOrderUnit",
        "VersionId": "u32",
        "PermissionName": "u64",
        "PermissionLevel": {
            "actor": "AccountName",
            "permission": "PermissionName"
        },
        "Action": {
            "account": "AccountName",
            "name": "ActionName",
            "authorization": "Vec<PermissionLevel>",
            "data": "Vec<u8>"
        },
        "AccountName": "u64",
        "Checksum256": "([u8;32])",
        "ActionName": "u64",
        "FlatMap": {
            "map": "Vec<(ActionName, u64)>"
        },
        "UnsignedInt": "u32",
        "ActionReceipt": {
            "receiver": "AccountName",
            "act_digest": "Checksum256",
            "global_sequence": "u64",
            "recv_sequence": "u64",
            "auth_sequence": "FlatMap<AccountName, u64>",
            "code_sequence": "UnsignedInt",
            "abi_sequence": "UnsignedInt"
        },
        "BlockchainType": {
            "_enum": [
                    "BIFROST",
                    "EOS",
                    "IOST"
            ]
        },
        "Precision": "u32",
        "BridgeAssetSymbol": {
            "blockchain": "BlockchainType",
            "symbol": "Vec<u8>",
            "precision": "Precision"
        },
        "PublicKey": {
            "type_": "UnsignedInt",
            "data": "[u8;33]"
        },
        "ProducerKey": {
            "producer_name": "AccountName",
            "block_signing_key": "PublicKey"
        },
        "ProducerSchedule": {
            "version": "u32",
            "producers": "Vec<ProducerKey>"
        },
        "bridgeEosSignature": {
            "type_": "UnsignedInt",
            "data": "[u8;65]"
        },
        "BlockTimestamp": "(u32)",
        "Extension": "(u16, Vec<u8>)",
        "BlockHeader": {
            "timestamp": "BlockTimestamp",
            "producer": "AccountName",
            "confirmed": "u16",
            "previous": "Checksum256",
            "transaction_mroot": "Checksum256",
            "action_mroot": "Checksum256",
            "schedule_version": "u32",
            "new_producers": "Option<ProducerSchedule>",
            "header_extensions": "Vec<Extension>"
        },
        "SignedBlockHeader": {
            "block_header": "BlockHeader",
            "producer_signature": "bridgeEosSignature"
        },
        "Checksum256Array": "Vec<Checksum256>",
        "IncrementalMerkle": {
            "_node_count": "u64",
            "_active_nodes": "Checksum256Array"
        },
        "TxSig": {
            "signature": "Vec<u8>",
            "author": "AccountId"
        },
        "MultiSig": {
            "signatures": "Vec<TxSig>",
            "threshold": "u8"
        },
        "MultiSigTx": {
            "chain_id": "Vec<u8>",
            "raw_tx": "Vec<u8>",
            "multi_sig": "MultiSig",
            "action": "Action",
            "from": "AccountId",
            "asset_id": "AssetId"
        },
        "Sent": {
            "tx_id": "Vec<u8>",
            "from": "AccountId",
            "asset_id": "AssetId"
        },
        "Succeeded": {
            "tx_id": "Vec<u8>"
        },
        "Failed": {
            "tx_id": "Vec<u8>",
            "reason": "Vec<u8>"
        },
        "TxOut": {
            "_enum": {
                "Initialized": "MultiSigTx",
                "Created": "MultiSigTx",
                "SignComplete": "MultiSigTx",
                "Sent": "Sent",
                "Succeeded": "Succeeded",
                "Failed": "Failed"
            }
        },
        "TransactionStatus": {
            "_enum": [
                    "Initialized",
                    "Created",
                    "SignComplete",
                    "Sent",
                    "Succeeded",
                    "Failed"
            ]
        },
        "ProducerAuthoritySchedule": {
            "version": "u32",
            "producers": "Vec<ProducerAuthority>"
        },
        "ProducerAuthority": {
            "producer_name": "ActionName",
            "authority": "BlockSigningAuthority"
        },
        "BlockSigningAuthority": "(UnsignedInt, BlockSigningAuthorityV0)",
        "BlockSigningAuthorityV0": {
            "threshold": "u32",
            "keyWeights": "Vec<KeyWeight>"
        },
        "KeyWeight": {
            "key": "PublicKey",
            "weight": "u16"
        },
        "BancorPool": {
            "currency_id": "CurrencyId",
            "token_pool": "Balance",
            "vstoken_pool": "Balance",
            "token_ceiling": "Balance",
            "token_base_supply": "Balance",
            "vstoken_base_supply": "Balance"
        },
        "IostAction": {
            "contract": "Vec<u8>",
            "action_name": "Vec<u8>",
            "data": "Vec<u8>"
        },
        "IostMultiSigTx": {
            "chain_id": "i32",
            "raw_tx": "Vec<u8>",
            "multi_sig": "MultiSig",
            "action": "IostAction",
            "from": "AccountId",
            "asset_id": "AssetId"
        },
        "Processing": {
            "tx_id": "Vec<u8>",
            "multi_sig_tx": "IostMultiSigTx"
        },
        "IostTxOut": {
            "_enum": {
                "Initial": "IostMultiSigTx",
                "Generated": "IostMultiSigTx",
                "Signed": "IostMultiSigTx",
                "Processing": "Processing",
                "Success": "Vec<u8>",
                "Fail": "Failed"
            }
        },
        "PalletBalanceOf": "Balance",
        "NumberOrHex": {
            "_enum": {
                "Number": "u64",
                "Hex": "U256"
            }
        },
        "IsExtended": "bool",
        "SystemPalletId": "PalletId",
        "TrieIndex": "u32",
        "FundInfo": {
            "depositor": "AccountId",
            "deposit": "Balance",
            "raised": "Balance",
            "cap": "Balance",
            "first_slot": "LeasePeriod",
            "last_slot": "LeasePeriod",
            "trie_index": "TrieIndex",
            "status": "FundStatus"
        },
        "RedeemStatus": "BalanceOf",
        "FundStatus": {
            "_enum": [
                    "Ongoing",
                    "Retired",
                    "Success",
                    "Failed",
                    "Withdrew",
                    "End"
            ]
        },
        "ContributionStatus": {
            "_enum": [
                    "Idle",
                    "Refunded",
                    "Unlocked",
                    "Refunding"
            ]
        },
        "CrowdloanContributeCall": {
            "_enum": {
                "CrowdloanContribute": "ContributeCall"
            }
        },
        "ContributeCall": {
            "_enum": {
                "Contribute": "Contribution"
            }
        },
        "Contribution": {
            "index": "ParaId",
            "value": "BalanceOf",
            "signature": "Option<MultiSignature>"
        },
        "Withdraw": {
            "who": "AccountIdOf",
            "index": "ParaId"
        },
        "WithdrawCall": {
            "_enum": {
                "Withdraw": "Withdraw"
            }
        },
        "RewardRecord": {
            "account_id": "AccountId",
            "record_amount": "Balance"
        },
        "PoolId": "u32",
        "SwapFee": "u128",
        "PoolDetails": {
            "owner": "AccountId",
            "swap_fee_rate": "SwapFee",
            "active": "bool"
        },
        "PoolWeight": "Balance",
        "PoolToken": "u128",
        "PoolCreateTokenDetails": {
            "token_id": "AssetId",
            "token_balance": "Balance",
            "token_weight": "PoolWeight"
        },
        "MaxLocksOf": "u32",
        "BifrostVestingInfo": {
            "locked": "Balance",
            "per_block": "Balance",
            "starting_block": "BlockNumber"
        },
        "OracleKey": "CurrencyId",
        "BlockNumberFor": "BlockNumber",
        "OrderId": "u64",
        "OrderInfo": {
            "owner": "AccountIdOf",
            "vsbond": "CurrencyId",
            "supply": "u128",
            "remain": "u128",
            "unit_price": "U64F64",
            "order_id": "OrderId",
            "order_state": "OrderState"
        },
        "OrderState": {
            "_enum": [
                    "InTrade",
                    "Revoked",
                    "Clinchd"
            ]
        },
        "U64F64": "u128",
        "AssetId": {
            "chain_id": "u32",
            "asset_type": "u8",
            "asset_index": "u32"
        },
        "AssetBalance": "u128",
        "PairInfo": {
            "asset0": "AssetId",
            "asset1": "AssetId",
            "account": "AccountId",
            "totalLiquidity": "AssetBalance",
            "holdingLiquidity": "AssetBalance",
            "reserve0": "AssetBalance",
            "reserve1": "AssetBalance",
            "lpAssetId": "AssetId"
        },
        "TokenSymbol": {
            "_enum": {
                "BNC": 0,
                "AUSD": 2,
                "DOT": 3,
                "KSM": 4,
                "ETH": 5
            }
        },
        "CurrencyId": {
            "_enum": {
                "Token": "TokenSymbol",
                "VToken": "TokenSymbol",
                "Native": "TokenSymbol",
                "Stable": "TokenSymbol",
                "VSToken": "TokenSymbol",
                "VSBond": "(TokenSymbol, ParaId, LeasePeriod, LeasePeriod)"
            }
        },
        "CurrencyIdOf": "CurrencyId",
        "TAssetBalance": "Balance",
        "AmountOf": "Balance",
        "StorageVersion": "Releases",
        "ShareWeight": "Balance",
        "TransferOriginType": {
            "_enum": {
                "FromSelf": 0,
                "FromRelayChain": 1,
                "FromSiblingParaChain": 2
            }
        },
        "Keys": "SessionKeys1"
  }
dataSources:
  - name: main
    kind: substrate/Runtime
    startBlock: 1
    mapping:
      handlers:
        # mappingVtokenPool.ts:
        # - handler: vtokenPoolBlock
        #   kind: substrate/BlockHandler
        # - handler: assetsTransferredEvent
        #   kind: substrate/EventHandler
        #   filter:
        #     module: currencies
        #     method: Transferred
        # - handler: assetsIssuedEvent
        #   kind: substrate/EventHandler
        #   filter:
        #     module: brmlAssets
        #     method: Issued
        # - handler: assetsBurnedEvent
        #   kind: substrate/EventHandler
        #   filter:
        #     module: brmlAssets
        #     method: Burned
        # - handler: assetsBlock
        #   kind: substrate/BlockHandler
        # - handler: vtokenMintMintedEvent
        #   kind: substrate/EventHandler
        #   filter:
        #     module: vtokenMint
        #     method: Minted
        # - handler: vtokenMintRedeemStartedEvent
        #   kind: substrate/EventHandler
        #   filter:
        #     module: vtokenMint
        #     method: RedeemStarted
        # - handler: aprBlock
        #   kind: substrate/BlockHandler
        # - handler: revenueBlock
        #   kind: substrate/BlockHandler
        # - handler: mktPriceBlock
        #   kind: substrate/BlockHandler
        - handler: zenlink
          kind: substrate/BlockHandler
        - handler: zenlinkAssetSwap
          kind: substrate/EventHandler
          filter:
            module: zenlinkProtocol
            method: AssetSwap
        - handler: zenlinkLiquidityAdded
          kind: substrate/EventHandler
          filter:
            module: zenlinkProtocol
            method: LiquidityAdded
        - handler: zenlinkLiquidityRemoved
          kind: substrate/EventHandler
          filter:
            module: zenlinkProtocol
            method: LiquidityRemoved
        # - handler: salp
        #   kind: substrate/BlockHandler
        - handler: vsbond
          kind: substrate/BlockHandler